terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region  = "ap-south-1"
  access_key = "AKIA4G64AFE2BKN4UIRM"
  secret_key = "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"
}

resource "aws_vpc" "myvpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_security_group" "madu" {
  name        = "madu"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.myvpc.id

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]

  }
  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
 
  }
  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "my-sg"
  }
}

resource "aws_instance" "myinstance" {
  ami = "ami-068257025f72f470d"
  instance_type = "t2.micro"
  key_name = "test"

  network_interface {
    network_interface_id = aws_network_interface.production-ni.id
    device_index         = 0
  }

    tags = {
      "name" = "demo"
    }

    user_data = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install apache2 -y
              sudo systemctl start apache2
              sudo systemctl enable apache2
              sudo bash -c 'echo hello this is from terraform > /var/www/html/index.html'
              EOF
  
}

resource "aws_ami_from_instance" "myamibackup" {
  name               = "mybackup"
  source_instance_id = aws_instance.myinstance.id
}

resource "aws_network_interface" "production-ni" {
  subnet_id       = aws_subnet.production-subnet.id
  security_groups = [aws_security_group.madu.id]
}

resource "aws_subnet" "production-subnet" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "ap-south-1b"
  map_public_ip_on_launch = true

  tags = {
    Name = "production-subenet"
  }
}
resource "aws_subnet" "production-subnet1" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "ap-south-1c"
  map_public_ip_on_launch = true

  tags = {
    Name = "production-subenet"
  }
}



# resource "aws_launch_configuration" "web" {
#   name  = "example-launch"
#   image_id      = aws_ami_from_instance.myamibackup.id
#   instance_type = "t2.micro"
#   lifecycle {
#     create_before_destroy = true
#   }

# }

# resource "aws_autoscaling_group" "bar" {
#   name = "example-autoscaling"
#   launch_configuration = aws_launch_configuration.web.id
#   desired_capacity   = 1
#   max_size           = 1
#   min_size           = 1
#   vpc_zone_identifier = [aws_subnet.production-subnet.id]
# }


data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_launch_configuration" "as_conf" {
  name          = "web_config"
  image_id      = aws_ami_from_instance.myamibackup.id
  instance_type = "t2.micro"
  security_groups = [aws_security_group.madu.id]
  key_name = "test"
}

resource "aws_launch_template" "foobar" {
  name_prefix   = "foobar"
  image_id      = aws_ami_from_instance.myamibackup.id
  instance_type = "t2.micro"
}

resource "aws_autoscaling_group" "bar" {
  availability_zones = ["ap-south-1b"]
  desired_capacity   = 1
  max_size           = 1
  min_size           = 1

  launch_template {
    id      = aws_launch_template.foobar.id
    version = "$Latest"
  }
}

resource "aws_lb" "test" {
  name               = "test-lb-tf"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.production-subnet.id,aws_subnet.production-subnet1.id]
  enable_deletion_protection = true

#   access_logs {
#     bucket  = "logzz"
#     prefix  = "test-lb"
#     enabled = true
#   }

  tags = {
    Environment = "production"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id     = aws_vpc.myvpc.id
}

resource "aws_lb_target_group" "test" {
  name     = "tf-example-lb-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id     = aws_vpc.myvpc.id
}

resource "aws_lb_target_group_attachment" "test" {
  target_group_arn = aws_lb_target_group.test.arn
  target_id        =  aws_instance.myinstance.id
  port             = 80
}

#route table creation
resource "aws_route_table" "example" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "10.5.0.0/24"
    gateway_id = aws_internet_gateway.gw.id
  }

#   route {
#     ipv6_cidr_block        = "::/0"
#     egress_only_gateway_id = aws_internet_gateway.gw.id
#   }

  tags = {
    Name = "example"
  }
}
resource "aws_route_table_association" "a" {
  subnet_id       = aws_subnet.production-subnet.id
  route_table_id = aws_route_table.example.id
}





